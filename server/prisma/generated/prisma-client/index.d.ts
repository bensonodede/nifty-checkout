// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  buyer: (where?: BuyerWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  seller: (where?: SellerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  buyer: (where: BuyerWhereUniqueInput) => BuyerPromise;
  buyers: (
    args?: {
      where?: BuyerWhereInput;
      orderBy?: BuyerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Buyer>;
  buyersConnection: (
    args?: {
      where?: BuyerWhereInput;
      orderBy?: BuyerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BuyerConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  seller: (where: SellerWhereUniqueInput) => SellerPromise;
  sellers: (
    args?: {
      where?: SellerWhereInput;
      orderBy?: SellerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Seller>;
  sellersConnection: (
    args?: {
      where?: SellerWhereInput;
      orderBy?: SellerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SellerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBuyer: (data: BuyerCreateInput) => BuyerPromise;
  updateBuyer: (
    args: { data: BuyerUpdateInput; where: BuyerWhereUniqueInput }
  ) => BuyerPromise;
  updateManyBuyers: (
    args: { data: BuyerUpdateManyMutationInput; where?: BuyerWhereInput }
  ) => BatchPayloadPromise;
  upsertBuyer: (
    args: {
      where: BuyerWhereUniqueInput;
      create: BuyerCreateInput;
      update: BuyerUpdateInput;
    }
  ) => BuyerPromise;
  deleteBuyer: (where: BuyerWhereUniqueInput) => BuyerPromise;
  deleteManyBuyers: (where?: BuyerWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSeller: (data: SellerCreateInput) => SellerPromise;
  updateSeller: (
    args: { data: SellerUpdateInput; where: SellerWhereUniqueInput }
  ) => SellerPromise;
  updateManySellers: (
    args: { data: SellerUpdateManyMutationInput; where?: SellerWhereInput }
  ) => BatchPayloadPromise;
  upsertSeller: (
    args: {
      where: SellerWhereUniqueInput;
      create: SellerCreateInput;
      update: SellerUpdateInput;
    }
  ) => SellerPromise;
  deleteSeller: (where: SellerWhereUniqueInput) => SellerPromise;
  deleteManySellers: (where?: SellerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  buyer: (
    where?: BuyerSubscriptionWhereInput
  ) => BuyerSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  seller: (
    where?: SellerSubscriptionWhereInput
  ) => SellerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "price_ASC"
  | "price_DESC"
  | "imgUrl_ASC"
  | "imgUrl_DESC";

export type BuyerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "phoneNum_ASC"
  | "phoneNum_DESC";

export type SellerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "storeName_ASC"
  | "storeName_DESC"
  | "phoneNum_ASC"
  | "phoneNum_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface OrderUpdateWithWhereUniqueWithoutBuyerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutBuyerDataInput;
}

export type BuyerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SellerUpdateWithoutOrdersDataInput {
  storeName?: String;
  phoneNum?: String;
  products?: ProductUpdateManyWithoutSellerInput;
}

export interface BuyerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  phoneNum?: String;
  phoneNum_not?: String;
  phoneNum_in?: String[] | String;
  phoneNum_not_in?: String[] | String;
  phoneNum_lt?: String;
  phoneNum_lte?: String;
  phoneNum_gt?: String;
  phoneNum_gte?: String;
  phoneNum_contains?: String;
  phoneNum_not_contains?: String;
  phoneNum_starts_with?: String;
  phoneNum_not_starts_with?: String;
  phoneNum_ends_with?: String;
  phoneNum_not_ends_with?: String;
  orders_every?: OrderWhereInput;
  orders_some?: OrderWhereInput;
  orders_none?: OrderWhereInput;
  AND?: BuyerWhereInput[] | BuyerWhereInput;
  OR?: BuyerWhereInput[] | BuyerWhereInput;
  NOT?: BuyerWhereInput[] | BuyerWhereInput;
}

export interface ProductUpdateManyWithoutSellerInput {
  create?: ProductCreateWithoutSellerInput[] | ProductCreateWithoutSellerInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  set?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutSellerInput[]
    | ProductUpdateWithWhereUniqueWithoutSellerInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutSellerInput[]
    | ProductUpsertWithWhereUniqueWithoutSellerInput;
  deleteMany?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  updateMany?:
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  seller?: SellerWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  imgUrl?: String;
  imgUrl_not?: String;
  imgUrl_in?: String[] | String;
  imgUrl_not_in?: String[] | String;
  imgUrl_lt?: String;
  imgUrl_lte?: String;
  imgUrl_gt?: String;
  imgUrl_gte?: String;
  imgUrl_contains?: String;
  imgUrl_not_contains?: String;
  imgUrl_starts_with?: String;
  imgUrl_not_starts_with?: String;
  imgUrl_ends_with?: String;
  imgUrl_not_ends_with?: String;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface ProductCreateOneInput {
  create?: ProductCreateInput;
  connect?: ProductWhereUniqueInput;
}

export interface BuyerUpdateWithoutOrdersDataInput {
  phoneNum?: String;
}

export interface ProductCreateInput {
  seller: SellerCreateOneWithoutProductsInput;
  title: String;
  price: Float;
  imgUrl: String;
}

export interface ProductUpdateWithWhereUniqueWithoutSellerInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutSellerDataInput;
}

export interface SellerCreateOneWithoutProductsInput {
  create?: SellerCreateWithoutProductsInput;
  connect?: SellerWhereUniqueInput;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  status?: Int;
  status_not?: Int;
  status_in?: Int[] | Int;
  status_not_in?: Int[] | Int;
  status_lt?: Int;
  status_lte?: Int;
  status_gt?: Int;
  status_gte?: Int;
  buyer?: BuyerWhereInput;
  seller?: SellerWhereInput;
  product?: ProductWhereInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface SellerCreateWithoutProductsInput {
  storeName: String;
  phoneNum: String;
  orders?: OrderCreateManyWithoutSellerInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface OrderCreateManyWithoutSellerInput {
  create?: OrderCreateWithoutSellerInput[] | OrderCreateWithoutSellerInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
}

export interface SellerUpdateManyMutationInput {
  storeName?: String;
  phoneNum?: String;
}

export interface OrderCreateWithoutSellerInput {
  status: Int;
  buyer: BuyerCreateOneWithoutOrdersInput;
  product: ProductCreateOneInput;
}

export interface SellerCreateInput {
  storeName: String;
  phoneNum: String;
  products?: ProductCreateManyWithoutSellerInput;
  orders?: OrderCreateManyWithoutSellerInput;
}

export interface BuyerCreateOneWithoutOrdersInput {
  create?: BuyerCreateWithoutOrdersInput;
  connect?: BuyerWhereUniqueInput;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BuyerCreateWithoutOrdersInput {
  phoneNum: String;
}

export interface OrderUpdateManyMutationInput {
  status?: Int;
}

export interface BuyerUpdateInput {
  phoneNum?: String;
  orders?: OrderUpdateManyWithoutBuyerInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderUpdateManyWithoutBuyerInput {
  create?: OrderCreateWithoutBuyerInput[] | OrderCreateWithoutBuyerInput;
  delete?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  set?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  disconnect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  update?:
    | OrderUpdateWithWhereUniqueWithoutBuyerInput[]
    | OrderUpdateWithWhereUniqueWithoutBuyerInput;
  upsert?:
    | OrderUpsertWithWhereUniqueWithoutBuyerInput[]
    | OrderUpsertWithWhereUniqueWithoutBuyerInput;
  deleteMany?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  updateMany?:
    | OrderUpdateManyWithWhereNestedInput[]
    | OrderUpdateManyWithWhereNestedInput;
}

export interface BuyerUpdateManyMutationInput {
  phoneNum?: String;
}

export interface OrderScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  status?: Int;
  status_not?: Int;
  status_in?: Int[] | Int;
  status_not_in?: Int[] | Int;
  status_lt?: Int;
  status_lte?: Int;
  status_gt?: Int;
  status_gte?: Int;
  AND?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  OR?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  NOT?: OrderScalarWhereInput[] | OrderScalarWhereInput;
}

export type SellerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  storeName?: String;
}>;

export interface OrderUpdateWithoutBuyerDataInput {
  status?: Int;
  seller?: SellerUpdateOneRequiredWithoutOrdersInput;
  product?: ProductUpdateOneRequiredInput;
}

export interface SellerUpsertWithoutProductsInput {
  update: SellerUpdateWithoutProductsDataInput;
  create: SellerCreateWithoutProductsInput;
}

export interface SellerUpdateOneRequiredWithoutOrdersInput {
  create?: SellerCreateWithoutOrdersInput;
  update?: SellerUpdateWithoutOrdersDataInput;
  upsert?: SellerUpsertWithoutOrdersInput;
  connect?: SellerWhereUniqueInput;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface SellerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  storeName?: String;
  storeName_not?: String;
  storeName_in?: String[] | String;
  storeName_not_in?: String[] | String;
  storeName_lt?: String;
  storeName_lte?: String;
  storeName_gt?: String;
  storeName_gte?: String;
  storeName_contains?: String;
  storeName_not_contains?: String;
  storeName_starts_with?: String;
  storeName_not_starts_with?: String;
  storeName_ends_with?: String;
  storeName_not_ends_with?: String;
  phoneNum?: String;
  phoneNum_not?: String;
  phoneNum_in?: String[] | String;
  phoneNum_not_in?: String[] | String;
  phoneNum_lt?: String;
  phoneNum_lte?: String;
  phoneNum_gt?: String;
  phoneNum_gte?: String;
  phoneNum_contains?: String;
  phoneNum_not_contains?: String;
  phoneNum_starts_with?: String;
  phoneNum_not_starts_with?: String;
  phoneNum_ends_with?: String;
  phoneNum_not_ends_with?: String;
  products_every?: ProductWhereInput;
  products_some?: ProductWhereInput;
  products_none?: ProductWhereInput;
  orders_every?: OrderWhereInput;
  orders_some?: OrderWhereInput;
  orders_none?: OrderWhereInput;
  AND?: SellerWhereInput[] | SellerWhereInput;
  OR?: SellerWhereInput[] | SellerWhereInput;
  NOT?: SellerWhereInput[] | SellerWhereInput;
}

export interface BuyerCreateInput {
  phoneNum: String;
  orders?: OrderCreateManyWithoutBuyerInput;
}

export interface OrderUpsertWithWhereUniqueWithoutSellerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutSellerDataInput;
  create: OrderCreateWithoutSellerInput;
}

export interface OrderCreateWithoutBuyerInput {
  status: Int;
  seller: SellerCreateOneWithoutOrdersInput;
  product: ProductCreateOneInput;
}

export interface BuyerUpsertWithoutOrdersInput {
  update: BuyerUpdateWithoutOrdersDataInput;
  create: BuyerCreateWithoutOrdersInput;
}

export interface SellerCreateWithoutOrdersInput {
  storeName: String;
  phoneNum: String;
  products?: ProductCreateManyWithoutSellerInput;
}

export interface ProductUpdateWithoutSellerDataInput {
  title?: String;
  price?: Float;
  imgUrl?: String;
}

export interface ProductCreateWithoutSellerInput {
  title: String;
  price: Float;
  imgUrl: String;
}

export interface ProductUpsertWithWhereUniqueWithoutSellerInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutSellerDataInput;
  create: ProductCreateWithoutSellerInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface ProductScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  imgUrl?: String;
  imgUrl_not?: String;
  imgUrl_in?: String[] | String;
  imgUrl_not_in?: String[] | String;
  imgUrl_lt?: String;
  imgUrl_lte?: String;
  imgUrl_gt?: String;
  imgUrl_gte?: String;
  imgUrl_contains?: String;
  imgUrl_not_contains?: String;
  imgUrl_starts_with?: String;
  imgUrl_not_starts_with?: String;
  imgUrl_ends_with?: String;
  imgUrl_not_ends_with?: String;
  AND?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  OR?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  NOT?: ProductScalarWhereInput[] | ProductScalarWhereInput;
}

export interface SellerUpdateInput {
  storeName?: String;
  phoneNum?: String;
  products?: ProductUpdateManyWithoutSellerInput;
  orders?: OrderUpdateManyWithoutSellerInput;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateInput {
  seller?: SellerUpdateOneRequiredWithoutProductsInput;
  title?: String;
  price?: Float;
  imgUrl?: String;
}

export interface ProductUpdateManyDataInput {
  title?: String;
  price?: Float;
  imgUrl?: String;
}

export interface OrderCreateInput {
  status: Int;
  buyer: BuyerCreateOneWithoutOrdersInput;
  seller: SellerCreateOneWithoutOrdersInput;
  product: ProductCreateOneInput;
}

export interface SellerUpsertWithoutOrdersInput {
  update: SellerUpdateWithoutOrdersDataInput;
  create: SellerCreateWithoutOrdersInput;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface ProductUpdateOneRequiredInput {
  create?: ProductCreateInput;
  update?: ProductUpdateDataInput;
  upsert?: ProductUpsertNestedInput;
  connect?: ProductWhereUniqueInput;
}

export interface SellerCreateOneWithoutOrdersInput {
  create?: SellerCreateWithoutOrdersInput;
  connect?: SellerWhereUniqueInput;
}

export interface ProductUpdateDataInput {
  seller?: SellerUpdateOneRequiredWithoutProductsInput;
  title?: String;
  price?: Float;
  imgUrl?: String;
}

export interface SellerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SellerWhereInput;
  AND?: SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput;
  OR?: SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput;
  NOT?: SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput;
}

export interface SellerUpdateOneRequiredWithoutProductsInput {
  create?: SellerCreateWithoutProductsInput;
  update?: SellerUpdateWithoutProductsDataInput;
  upsert?: SellerUpsertWithoutProductsInput;
  connect?: SellerWhereUniqueInput;
}

export interface ProductUpdateManyMutationInput {
  title?: String;
  price?: Float;
  imgUrl?: String;
}

export interface SellerUpdateWithoutProductsDataInput {
  storeName?: String;
  phoneNum?: String;
  orders?: OrderUpdateManyWithoutSellerInput;
}

export interface OrderUpsertWithWhereUniqueWithoutBuyerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutBuyerDataInput;
  create: OrderCreateWithoutBuyerInput;
}

export interface BuyerUpdateOneRequiredWithoutOrdersInput {
  create?: BuyerCreateWithoutOrdersInput;
  update?: BuyerUpdateWithoutOrdersDataInput;
  upsert?: BuyerUpsertWithoutOrdersInput;
  connect?: BuyerWhereUniqueInput;
}

export interface OrderUpdateWithoutSellerDataInput {
  status?: Int;
  buyer?: BuyerUpdateOneRequiredWithoutOrdersInput;
  product?: ProductUpdateOneRequiredInput;
}

export interface OrderUpdateWithWhereUniqueWithoutSellerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutSellerDataInput;
}

export interface OrderUpdateManyWithoutSellerInput {
  create?: OrderCreateWithoutSellerInput[] | OrderCreateWithoutSellerInput;
  delete?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  set?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  disconnect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  update?:
    | OrderUpdateWithWhereUniqueWithoutSellerInput[]
    | OrderUpdateWithWhereUniqueWithoutSellerInput;
  upsert?:
    | OrderUpsertWithWhereUniqueWithoutSellerInput[]
    | OrderUpsertWithWhereUniqueWithoutSellerInput;
  deleteMany?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  updateMany?:
    | OrderUpdateManyWithWhereNestedInput[]
    | OrderUpdateManyWithWhereNestedInput;
}

export interface OrderUpdateManyDataInput {
  status?: Int;
}

export interface OrderUpdateInput {
  status?: Int;
  buyer?: BuyerUpdateOneRequiredWithoutOrdersInput;
  seller?: SellerUpdateOneRequiredWithoutOrdersInput;
  product?: ProductUpdateOneRequiredInput;
}

export interface BuyerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BuyerWhereInput;
  AND?: BuyerSubscriptionWhereInput[] | BuyerSubscriptionWhereInput;
  OR?: BuyerSubscriptionWhereInput[] | BuyerSubscriptionWhereInput;
  NOT?: BuyerSubscriptionWhereInput[] | BuyerSubscriptionWhereInput;
}

export interface ProductCreateManyWithoutSellerInput {
  create?: ProductCreateWithoutSellerInput[] | ProductCreateWithoutSellerInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface OrderCreateManyWithoutBuyerInput {
  create?: OrderCreateWithoutBuyerInput[] | OrderCreateWithoutBuyerInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SellerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  storeName: String;
  phoneNum: String;
}

export interface SellerPreviousValuesPromise
  extends Promise<SellerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  storeName: () => Promise<String>;
  phoneNum: () => Promise<String>;
}

export interface SellerPreviousValuesSubscription
  extends Promise<AsyncIterator<SellerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  storeName: () => Promise<AsyncIterator<String>>;
  phoneNum: () => Promise<AsyncIterator<String>>;
}

export interface BuyerEdge {
  node: Buyer;
  cursor: String;
}

export interface BuyerEdgePromise extends Promise<BuyerEdge>, Fragmentable {
  node: <T = BuyerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BuyerEdgeSubscription
  extends Promise<AsyncIterator<BuyerEdge>>,
    Fragmentable {
  node: <T = BuyerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Order {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: Int;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
  buyer: <T = BuyerPromise>() => T;
  seller: <T = SellerPromise>() => T;
  product: <T = ProductPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
  buyer: <T = BuyerSubscription>() => T;
  seller: <T = SellerSubscription>() => T;
  product: <T = ProductSubscription>() => T;
}

export interface AggregateBuyer {
  count: Int;
}

export interface AggregateBuyerPromise
  extends Promise<AggregateBuyer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBuyerSubscription
  extends Promise<AsyncIterator<AggregateBuyer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  price: Float;
  imgUrl: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  seller: <T = SellerPromise>() => T;
  title: () => Promise<String>;
  price: () => Promise<Float>;
  imgUrl: () => Promise<String>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  seller: <T = SellerSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  price: Float;
  imgUrl: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  price: () => Promise<Float>;
  imgUrl: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
}

export interface SellerConnection {
  pageInfo: PageInfo;
  edges: SellerEdge[];
}

export interface SellerConnectionPromise
  extends Promise<SellerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SellerEdge>>() => T;
  aggregate: <T = AggregateSellerPromise>() => T;
}

export interface SellerConnectionSubscription
  extends Promise<AsyncIterator<SellerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SellerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSellerSubscription>() => T;
}

export interface AggregateSeller {
  count: Int;
}

export interface AggregateSellerPromise
  extends Promise<AggregateSeller>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSellerSubscription
  extends Promise<AsyncIterator<AggregateSeller>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BuyerConnection {
  pageInfo: PageInfo;
  edges: BuyerEdge[];
}

export interface BuyerConnectionPromise
  extends Promise<BuyerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BuyerEdge>>() => T;
  aggregate: <T = AggregateBuyerPromise>() => T;
}

export interface BuyerConnectionSubscription
  extends Promise<AsyncIterator<BuyerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BuyerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBuyerSubscription>() => T;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface Buyer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  phoneNum: String;
}

export interface BuyerPromise extends Promise<Buyer>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  phoneNum: () => Promise<String>;
  orders: <T = FragmentableArray<Order>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BuyerSubscription
  extends Promise<AsyncIterator<Buyer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNum: () => Promise<AsyncIterator<String>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BuyerSubscriptionPayload {
  mutation: MutationType;
  node: Buyer;
  updatedFields: String[];
  previousValues: BuyerPreviousValues;
}

export interface BuyerSubscriptionPayloadPromise
  extends Promise<BuyerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BuyerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BuyerPreviousValuesPromise>() => T;
}

export interface BuyerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BuyerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BuyerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BuyerPreviousValuesSubscription>() => T;
}

export interface SellerEdge {
  node: Seller;
  cursor: String;
}

export interface SellerEdgePromise extends Promise<SellerEdge>, Fragmentable {
  node: <T = SellerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SellerEdgeSubscription
  extends Promise<AsyncIterator<SellerEdge>>,
    Fragmentable {
  node: <T = SellerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: Int;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface BuyerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  phoneNum: String;
}

export interface BuyerPreviousValuesPromise
  extends Promise<BuyerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  phoneNum: () => Promise<String>;
}

export interface BuyerPreviousValuesSubscription
  extends Promise<AsyncIterator<BuyerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNum: () => Promise<AsyncIterator<String>>;
}

export interface SellerSubscriptionPayload {
  mutation: MutationType;
  node: Seller;
  updatedFields: String[];
  previousValues: SellerPreviousValues;
}

export interface SellerSubscriptionPayloadPromise
  extends Promise<SellerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SellerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SellerPreviousValuesPromise>() => T;
}

export interface SellerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SellerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SellerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SellerPreviousValuesSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Seller {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  storeName: String;
  phoneNum: String;
}

export interface SellerPromise extends Promise<Seller>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  storeName: () => Promise<String>;
  phoneNum: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orders: <T = FragmentableArray<Order>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SellerSubscription
  extends Promise<AsyncIterator<Seller>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  storeName: () => Promise<AsyncIterator<String>>;
  phoneNum: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Seller",
    embedded: false
  },
  {
    name: "Buyer",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
