module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBuyer {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSeller {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Buyer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  phoneNum: String!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

type BuyerConnection {
  pageInfo: PageInfo!
  edges: [BuyerEdge]!
  aggregate: AggregateBuyer!
}

input BuyerCreateInput {
  phoneNum: String!
  orders: OrderCreateManyWithoutBuyerInput
}

input BuyerCreateOneWithoutOrdersInput {
  create: BuyerCreateWithoutOrdersInput
  connect: BuyerWhereUniqueInput
}

input BuyerCreateWithoutOrdersInput {
  phoneNum: String!
}

type BuyerEdge {
  node: Buyer!
  cursor: String!
}

enum BuyerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  phoneNum_ASC
  phoneNum_DESC
}

type BuyerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  phoneNum: String!
}

type BuyerSubscriptionPayload {
  mutation: MutationType!
  node: Buyer
  updatedFields: [String!]
  previousValues: BuyerPreviousValues
}

input BuyerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BuyerWhereInput
  AND: [BuyerSubscriptionWhereInput!]
  OR: [BuyerSubscriptionWhereInput!]
  NOT: [BuyerSubscriptionWhereInput!]
}

input BuyerUpdateInput {
  phoneNum: String
  orders: OrderUpdateManyWithoutBuyerInput
}

input BuyerUpdateManyMutationInput {
  phoneNum: String
}

input BuyerUpdateOneRequiredWithoutOrdersInput {
  create: BuyerCreateWithoutOrdersInput
  update: BuyerUpdateWithoutOrdersDataInput
  upsert: BuyerUpsertWithoutOrdersInput
  connect: BuyerWhereUniqueInput
}

input BuyerUpdateWithoutOrdersDataInput {
  phoneNum: String
}

input BuyerUpsertWithoutOrdersInput {
  update: BuyerUpdateWithoutOrdersDataInput!
  create: BuyerCreateWithoutOrdersInput!
}

input BuyerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  phoneNum: String
  phoneNum_not: String
  phoneNum_in: [String!]
  phoneNum_not_in: [String!]
  phoneNum_lt: String
  phoneNum_lte: String
  phoneNum_gt: String
  phoneNum_gte: String
  phoneNum_contains: String
  phoneNum_not_contains: String
  phoneNum_starts_with: String
  phoneNum_not_starts_with: String
  phoneNum_ends_with: String
  phoneNum_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  AND: [BuyerWhereInput!]
  OR: [BuyerWhereInput!]
  NOT: [BuyerWhereInput!]
}

input BuyerWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBuyer(data: BuyerCreateInput!): Buyer!
  updateBuyer(data: BuyerUpdateInput!, where: BuyerWhereUniqueInput!): Buyer
  updateManyBuyers(data: BuyerUpdateManyMutationInput!, where: BuyerWhereInput): BatchPayload!
  upsertBuyer(where: BuyerWhereUniqueInput!, create: BuyerCreateInput!, update: BuyerUpdateInput!): Buyer!
  deleteBuyer(where: BuyerWhereUniqueInput!): Buyer
  deleteManyBuyers(where: BuyerWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createSeller(data: SellerCreateInput!): Seller!
  updateSeller(data: SellerUpdateInput!, where: SellerWhereUniqueInput!): Seller
  updateManySellers(data: SellerUpdateManyMutationInput!, where: SellerWhereInput): BatchPayload!
  upsertSeller(where: SellerWhereUniqueInput!, create: SellerCreateInput!, update: SellerUpdateInput!): Seller!
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  deleteManySellers(where: SellerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  buyer: Buyer!
  seller: Seller!
  product: Product!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  status: Int!
  buyer: BuyerCreateOneWithoutOrdersInput!
  seller: SellerCreateOneWithoutOrdersInput!
  product: ProductCreateOneInput!
}

input OrderCreateManyWithoutBuyerInput {
  create: [OrderCreateWithoutBuyerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutSellerInput {
  create: [OrderCreateWithoutSellerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutBuyerInput {
  status: Int!
  seller: SellerCreateOneWithoutOrdersInput!
  product: ProductCreateOneInput!
}

input OrderCreateWithoutSellerInput {
  status: Int!
  buyer: BuyerCreateOneWithoutOrdersInput!
  product: ProductCreateOneInput!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  status: Int
  buyer: BuyerUpdateOneRequiredWithoutOrdersInput
  seller: SellerUpdateOneRequiredWithoutOrdersInput
  product: ProductUpdateOneRequiredInput
}

input OrderUpdateManyDataInput {
  status: Int
}

input OrderUpdateManyMutationInput {
  status: Int
}

input OrderUpdateManyWithoutBuyerInput {
  create: [OrderCreateWithoutBuyerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutBuyerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutBuyerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithoutSellerInput {
  create: [OrderCreateWithoutSellerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutSellerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutSellerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateWithoutBuyerDataInput {
  status: Int
  seller: SellerUpdateOneRequiredWithoutOrdersInput
  product: ProductUpdateOneRequiredInput
}

input OrderUpdateWithoutSellerDataInput {
  status: Int
  buyer: BuyerUpdateOneRequiredWithoutOrdersInput
  product: ProductUpdateOneRequiredInput
}

input OrderUpdateWithWhereUniqueWithoutBuyerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutBuyerDataInput!
}

input OrderUpdateWithWhereUniqueWithoutSellerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutSellerDataInput!
}

input OrderUpsertWithWhereUniqueWithoutBuyerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutBuyerDataInput!
  create: OrderCreateWithoutBuyerInput!
}

input OrderUpsertWithWhereUniqueWithoutSellerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutSellerDataInput!
  create: OrderCreateWithoutSellerInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  buyer: BuyerWhereInput
  seller: SellerWhereInput
  product: ProductWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  seller: Seller!
  title: String!
  price: Float!
  imgUrl: String!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  seller: SellerCreateOneWithoutProductsInput!
  title: String!
  price: Float!
  imgUrl: String!
}

input ProductCreateManyWithoutSellerInput {
  create: [ProductCreateWithoutSellerInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutSellerInput {
  title: String!
  price: Float!
  imgUrl: String!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  price_ASC
  price_DESC
  imgUrl_ASC
  imgUrl_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  price: Float!
  imgUrl: String!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  seller: SellerUpdateOneRequiredWithoutProductsInput
  title: String
  price: Float
  imgUrl: String
}

input ProductUpdateInput {
  seller: SellerUpdateOneRequiredWithoutProductsInput
  title: String
  price: Float
  imgUrl: String
}

input ProductUpdateManyDataInput {
  title: String
  price: Float
  imgUrl: String
}

input ProductUpdateManyMutationInput {
  title: String
  price: Float
  imgUrl: String
}

input ProductUpdateManyWithoutSellerInput {
  create: [ProductCreateWithoutSellerInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutSellerInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutSellerInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutSellerDataInput {
  title: String
  price: Float
  imgUrl: String
}

input ProductUpdateWithWhereUniqueWithoutSellerInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutSellerDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueWithoutSellerInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutSellerDataInput!
  create: ProductCreateWithoutSellerInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  seller: SellerWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  buyer(where: BuyerWhereUniqueInput!): Buyer
  buyers(where: BuyerWhereInput, orderBy: BuyerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Buyer]!
  buyersConnection(where: BuyerWhereInput, orderBy: BuyerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BuyerConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  seller(where: SellerWhereUniqueInput!): Seller
  sellers(where: SellerWhereInput, orderBy: SellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Seller]!
  sellersConnection(where: SellerWhereInput, orderBy: SellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SellerConnection!
  node(id: ID!): Node
}

type Seller {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storeName: String!
  phoneNum: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

type SellerConnection {
  pageInfo: PageInfo!
  edges: [SellerEdge]!
  aggregate: AggregateSeller!
}

input SellerCreateInput {
  storeName: String!
  phoneNum: String!
  products: ProductCreateManyWithoutSellerInput
  orders: OrderCreateManyWithoutSellerInput
}

input SellerCreateOneWithoutOrdersInput {
  create: SellerCreateWithoutOrdersInput
  connect: SellerWhereUniqueInput
}

input SellerCreateOneWithoutProductsInput {
  create: SellerCreateWithoutProductsInput
  connect: SellerWhereUniqueInput
}

input SellerCreateWithoutOrdersInput {
  storeName: String!
  phoneNum: String!
  products: ProductCreateManyWithoutSellerInput
}

input SellerCreateWithoutProductsInput {
  storeName: String!
  phoneNum: String!
  orders: OrderCreateManyWithoutSellerInput
}

type SellerEdge {
  node: Seller!
  cursor: String!
}

enum SellerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  storeName_ASC
  storeName_DESC
  phoneNum_ASC
  phoneNum_DESC
}

type SellerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storeName: String!
  phoneNum: String!
}

type SellerSubscriptionPayload {
  mutation: MutationType!
  node: Seller
  updatedFields: [String!]
  previousValues: SellerPreviousValues
}

input SellerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SellerWhereInput
  AND: [SellerSubscriptionWhereInput!]
  OR: [SellerSubscriptionWhereInput!]
  NOT: [SellerSubscriptionWhereInput!]
}

input SellerUpdateInput {
  storeName: String
  phoneNum: String
  products: ProductUpdateManyWithoutSellerInput
  orders: OrderUpdateManyWithoutSellerInput
}

input SellerUpdateManyMutationInput {
  storeName: String
  phoneNum: String
}

input SellerUpdateOneRequiredWithoutOrdersInput {
  create: SellerCreateWithoutOrdersInput
  update: SellerUpdateWithoutOrdersDataInput
  upsert: SellerUpsertWithoutOrdersInput
  connect: SellerWhereUniqueInput
}

input SellerUpdateOneRequiredWithoutProductsInput {
  create: SellerCreateWithoutProductsInput
  update: SellerUpdateWithoutProductsDataInput
  upsert: SellerUpsertWithoutProductsInput
  connect: SellerWhereUniqueInput
}

input SellerUpdateWithoutOrdersDataInput {
  storeName: String
  phoneNum: String
  products: ProductUpdateManyWithoutSellerInput
}

input SellerUpdateWithoutProductsDataInput {
  storeName: String
  phoneNum: String
  orders: OrderUpdateManyWithoutSellerInput
}

input SellerUpsertWithoutOrdersInput {
  update: SellerUpdateWithoutOrdersDataInput!
  create: SellerCreateWithoutOrdersInput!
}

input SellerUpsertWithoutProductsInput {
  update: SellerUpdateWithoutProductsDataInput!
  create: SellerCreateWithoutProductsInput!
}

input SellerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  storeName: String
  storeName_not: String
  storeName_in: [String!]
  storeName_not_in: [String!]
  storeName_lt: String
  storeName_lte: String
  storeName_gt: String
  storeName_gte: String
  storeName_contains: String
  storeName_not_contains: String
  storeName_starts_with: String
  storeName_not_starts_with: String
  storeName_ends_with: String
  storeName_not_ends_with: String
  phoneNum: String
  phoneNum_not: String
  phoneNum_in: [String!]
  phoneNum_not_in: [String!]
  phoneNum_lt: String
  phoneNum_lte: String
  phoneNum_gt: String
  phoneNum_gte: String
  phoneNum_contains: String
  phoneNum_not_contains: String
  phoneNum_starts_with: String
  phoneNum_not_starts_with: String
  phoneNum_ends_with: String
  phoneNum_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  AND: [SellerWhereInput!]
  OR: [SellerWhereInput!]
  NOT: [SellerWhereInput!]
}

input SellerWhereUniqueInput {
  id: ID
  storeName: String
}

type Subscription {
  buyer(where: BuyerSubscriptionWhereInput): BuyerSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  seller(where: SellerSubscriptionWhereInput): SellerSubscriptionPayload
}
`
      }
    